1) git config -l

  The command below returns a list of information about your git configuration including user name and email:

2) git config --global user.name "Pratik"

  With the command below you can configure your user name:

3) git config --global user.email "pratikpawar1826.com"

  This command lets you setup the user email address you'll use in your commits.

4) git config --global credential.helper cache

  You can store login credentials in the cache so you don't have to type them in each time. Just use this command:

5) git init

  Everything starts from here. The first step is to initialize a new Git repo locally in your project root. You can do so with the command below:

6) git add filename_here

  The command below will add a file to the staging area. Just replace filename_here with the name of the file you want to add to the staging area.

7) git add .

  If you want to add all files in your project to the staging area, you can use a wildcard . and every file will be added for you.


8) git add fil*

  With the asterisk in the command below, you can add all files starting with 'fil' in the staging area.

9) git status

  This command will show the status of the current repository including staged, unstaged, and untracked files.

10) git commit

  This command will open a text editor in the terminal where you can write a full commit message.
  A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it.

11) git commit -m "your commit message here"

  we can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message.

12) git commit -a -m"your commit message here"
 
  we can add and commit tracked files with a single command by using the -a and -m options.

13) git log
  
  This command shows the commit history for the current repository:

14) git log -p

  This command shows the commit's history including all files and their changes:

15) git show commit-id

  This command shows a specific commit.
  Replace commit-id with the id of the commit that you find in the commit log after the word commit.



